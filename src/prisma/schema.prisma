// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum PatientStatus {
  REPORTED
  NOT_REPORTED
}

model Doctor {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  birthdate       DateTime
  phone           String
  specialty       String
  dni             String           @unique
  tuitionNumber   Int
  bio             String?
  user            User             @relation(fields: [userId], references: [id])
  userId          Int              @unique
  medicalCenterId Int
  medicalCenter   MedicalCenter    @relation(fields: [medicalCenterId], references: [id])
  medicalCares    MedicalCare[]
  monitoringPlan  MonitoringPlan[]
}

model Patient {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  birthdate      DateTime
  phone          String
  dni            String           @unique
  height         Int
  weight         Int
  bloodType      String
  user           User             @relation(fields: [userId], references: [id])
  userId         Int              @unique
  status         PatientStatus    @default(NOT_REPORTED)
  medicalCares   MedicalCare[]
  monitoringPlan MonitoringPlan[]
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  doctor    Doctor?
  patient   Patient?
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalCare {
  patientId Int
  doctorId  Int
  patient   Patient @relation(fields: [patientId], references: [id])
  doctor    Doctor  @relation(fields: [doctorId], references: [id])

  @@id([patientId, doctorId])
}

model MedicalCenter {
  id       Int      @id @default(autoincrement())
  name     String
  address  String
  province String
  region   String
  district String
  category String
  doctors  Doctor[]
}

model MonitoringPlan {
  id              Int             @id @default(autoincrement())
  code            Int             @unique
  startDate       DateTime        @default(now())
  endDate         DateTime
  temperature     Decimal?
  saturation      Decimal?
  heartRate       Decimal?
  patientId       Int
  doctorId        Int
  patient         Patient         @relation(fields: [patientId], references: [id])
  doctor          Doctor          @relation(fields: [doctorId], references: [id])
  dischargePaper  DischargePaper?
  priority        PriorityType?   @relation(fields: [priorityTypeId], references: [id])
  emergencyType   EmergencyType?  @relation(fields: [emergencyTypeId], references: [id])
  emergencyTypeId Int?
  priorityTypeId  Int?
}

model DischargePaper {
  id               Int            @id @default(autoincrement())
  code             Int
  description      String
  dischargeDate    DateTime       @default(now())
  monitoringPlan   MonitoringPlan @relation(fields: [monitoringPlanId], references: [id])
  monitoringPlanId Int            @unique
}

model Prescription {
  id           Int     @id @default(autoincrement())
  code         Int
  medicine1    String
  medicine2    String?
  medicine3    String?
  medicine4    String?
  medicine5    String?
  instructions String?
}

model EmergencyType {
  id             Int              @id @default(autoincrement())
  name           String
  MonitoringPlan MonitoringPlan[]
}

model PriorityType {
  id             Int              @id @default(autoincrement())
  name           String
  MonitoringPlan MonitoringPlan[]
}
