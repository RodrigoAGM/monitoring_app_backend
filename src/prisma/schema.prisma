// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum IdType {
  DNI
  CE
}

enum PatientStatus {
  ON_MONITORING
  DISCHARGED
}

model Doctor {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  birthdate       DateTime
  phone           String
  specialty       String?
  tuitionNumber   Int?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int              @unique
  medicalCenterId Int
  medicalCenter   MedicalCenter    @relation(fields: [medicalCenterId], references: [id])
  monitoringPlan  MonitoringPlan[]
}

model Patient {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  birthdate      DateTime
  phone          String
  height         Int
  weight         Int
  bloodType      String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int              @unique
  status         PatientStatus?   @default(DISCHARGED)
  monitoringPlan MonitoringPlan[]
}

model User {
  id             Int      @id @default(autoincrement())
  email          String
  idType         IdType   @default(DNI)
  identification String   @unique
  password       String
  doctor         Doctor?
  patient        Patient?
  role           Role     @default(PATIENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MedicalCenter {
  id       Int      @id @default(autoincrement())
  name     String
  address  String
  province String
  region   String
  district String
  category String
  doctors  Doctor[]
}

model MonitoringPlan {
  id              Int             @id @default(autoincrement())
  code            Int             @unique
  startDate       DateTime        @default(now())
  endDate         DateTime
  patientId       Int
  doctorId        Int
  emergencyTypeId Int?
  priorityTypeId  Int?
  patient         Patient         @relation(fields: [patientId], references: [id])
  doctor          Doctor          @relation(fields: [doctorId], references: [id])
  priority        PriorityType?   @relation(fields: [priorityTypeId], references: [id])
  emergencyType   EmergencyType?  @relation(fields: [emergencyTypeId], references: [id])
  dischargePaper  DischargePaper?
  dailyReports    DailyReport[]
}

model DailyReport {
  id               Int            @id @default(autoincrement())
  temperature      Decimal
  saturation       Decimal
  heartRate        Decimal
  createdAt        DateTime       @default(now())
  monitoringPlan   MonitoringPlan @relation(fields: [monitoringPlanId], references: [id])
  monitoringPlanId Int
}

model DischargePaper {
  id               Int            @id @default(autoincrement())
  code             Int
  description      String
  dischargeDate    DateTime       @default(now())
  monitoringPlan   MonitoringPlan @relation(fields: [monitoringPlanId], references: [id])
  monitoringPlanId Int            @unique
}

model Prescription {
  id           Int     @id @default(autoincrement())
  code         Int
  medicine1    String
  medicine2    String?
  medicine3    String?
  medicine4    String?
  medicine5    String?
  instructions String?
}

model EmergencyType {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(250)
  MonitoringPlan MonitoringPlan[]
}

model PriorityType {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(250)
  MonitoringPlan MonitoringPlan[]
}

model RefreshToken {
  token        String   @db.VarChar(250)
  refreshToken String   @db.VarChar(250)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([refreshToken])
}
